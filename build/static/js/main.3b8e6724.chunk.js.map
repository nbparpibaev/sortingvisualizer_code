{"version":3,"sources":["Footer.jsx","Navbar.jsx","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","Visualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","Component","Navbar","props","state","size","changeSize","bind","newSize","this","handleSlider","onClick","handleNewArrayButton","handleReverseButton","handleMergeSortButton","defaultValue","min","max","onAfterChange","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","PRIMARY_COLOR","SortingVisualizer","resetArray","mergeSort","handleSize","reverseArray","newArray","sort","a","b","setState","console","log","random","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","pow","newHeight","height","bars","map","value","idx","width","margin","React","Visualizer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3b8e6724.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./Footer.css\"; \n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"Footer\">    \n                <span className='text'>Visualize the merge sort</span>\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react'\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"./Navbar.css\";\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: 100,\n        }\n        this.changeSize = this.changeSize.bind(this);\n    }\n\n    changeSize(newSize) {\n        this.props.handleSlider(newSize);\n    }\n\n    render() {\n        return (\n            <div className=\"Navbar\">\n                <div className=\"buttonsContainer\">\n                    <button className=\"items createNewArray\" \n                     onClick={this.props.handleNewArrayButton}>Create New Array</button>\n                    <button className=\"items createNewArray\"\n                     onClick={this.props.handleReverseButton}> Reverse</button>\n                    <button className=\"items createNewArray\"\n                     onClick={() => this.props.handleMergeSortButton()}>Merge Sort</button>\n    \n                </div>\n                <div className=\"slider\">\n                    <span className=\"text Slider\">Array size</span>\n                    <Slider className=\"Slider\"\n                        defaultValue={this.state.size}\n                        min={30}\n                        max={350}\n                        onAfterChange={this.changeSize}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\nexport default Navbar;","\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React from 'react';\nimport Footer from '../Footer.jsx';\nimport Navbar from '../Navbar.jsx';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n\nconst PRIMARY_COLOR = \"#06918b\";\n\nconst SECONDARY_COLOR = '#ce144f';\n\nexport default class SortingVisualizer extends React.Component {\n    \n    constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      size:100,\n    };\n    this.resetArray = this.resetArray.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.handleSize = this.handleSize.bind(this);\n    this.reverseArray = this.reverseArray.bind(this);\n  }\n\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  reverseArray() {\n      var newArray = this.state.array.sort((a, b) => b-a);\n      this.setState({\n          array: newArray\n      });\n  }\n\n  handleSize(newSize) {\n      this.setState({\n          size: newSize\n      }, ()=> {\n          this.resetArray();\n      });\n      console.log(`${newSize} items`);\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.size; i++) {\n      array.push(randomIntFromInterval(10, 700));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 300000 / Math.pow(this.state.size, 2));\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 300000 / Math.pow(this.state.size, 2));\n      }\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    const bars = array.map((value, idx) => (\n        <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`,\n            width: `${900 / this.state.size}px`,\n            margin:`${1}px`\n            }}></div>\n        ));\n    return (\n    <div className=\"Visualizer\">\n        <Navbar \n            handleNewArrayButton={this.resetArray}\n            handleReverseButton = {this.reverseArray}\n            handleMergeSortButton = {this.mergeSort}\n            handleSlider = {this.handleSize}\n            \n        />\n        <div className=\"array-container\">\n            {bars}\n        </div>\n        <Footer />\n    </div>\n    );\n  }\n}\n\n\nfunction randomIntFromInterval(min, max) {\n\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, { Component } from 'react'\nimport Footer from './Footer'\nimport Navbar from './Navbar'\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\n\nimport \"./Visualizer.css\";\nclass Visualizer extends Component {\n    constructor(props) {\n        super(props); \n            this.state = {\n                newArray: false\n            };\n           // this.handleNewArray = this.handleNewArray.bind(this);\n    }\n\n    // handleNewArray() {\n    //     this.setState({\n    //         newArray: !this.state.newArray\n    //     });\n    // }\n\n    render() {\n        return (\n            <div className = \"Visualizer\">\n                <SortingVisualizer />\n            </div>\n        );\n    }\n}\nexport default Visualizer;","import React from \"react\";\nimport Visualizer from \"./Visualizer\";\n\n//import \"./App.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}